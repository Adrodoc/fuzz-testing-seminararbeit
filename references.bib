% Encoding: UTF-8

@book{myers2004art,
  title={The Art of Software Testing},
  author={Myers, Glenford J and Badgett, Tom and Thomas, Todd M and Sandler, Corey},
  year={2004},
  publisher={New Jersey: John Wiley \& Sons, Inc.}
}

@article{TSE12_EvoSuite,
 author = {Gordon Fraser and Andrea Arcuri},
 title = {Whole Test Suite Generation},
 journal ={IEEE Transactions on Software Engineering},
 year={2013},
 month={feb. },
 volume={39},
 number={2},
 pages={276 -291},
 abstract={Not all bugs lead to program crashes, and not always is there a formal specification to check the correctness of a software test's outcome. A common scenario in software testing is therefore that test data are generated, and a tester manually adds test oracles. As this is a difficult task, it is important to produce small yet representative test sets, and this representativeness is typically measured using code coverage. There is, however, a fundamental problem with the common approach of targeting one coverage goal at a time: Coverage goals are not independent, not equally difficult, and sometimes infeasible-the result of test generation is therefore dependent on the order of coverage goals and how many of them are feasible. To overcome this problem, we propose a novel paradigm in which whole test suites are evolved with the aim of covering all coverage goals at the same time while keeping the total size as small as possible. This approach has several advantages, as for example, its effectiveness is not affected by the number of infeasible targets in the code. We have implemented this novel approach in the EvoSuite tool, and compared it to the common approach of addressing one goal at a time. Evaluated on open source libraries and an industrial case study for a total of 1,741 classes, we show that EvoSuite achieved up to 188 times the branch coverage of a traditional approach targeting single branches, with up to 62 percent smaller test suites.},
 keywords={Arrays;Genetic algorithms;Genetic programming;Search problems;Software;Software testing;formal specification;program debugging;program testing;EvoSuite tool;code coverage;formal specification;program crashes;program debugging;software testing;whole test suite generation;Search-based software engineering;branch coverage;collateral coverage;genetic algorithm;infeasible goal;length;},
 doi={10.1109/TSE.2012.14},
 ISSN={0098-5589},
 url = {http://www.evosuite.org/wp-content/papercite-data/pdf/tse12_evosuite.pdf},
}

@article{TSE12_Mutation,
 author = {Gordon Fraser and Andreas Zeller},
 title = {Mutation-Driven Generation of Unit Tests and Oracles},
 journal ={IEEE Transactions on Software Engineering},
 year={2012},
 volume={38},
 number={2},
 pages={278--292},
 month={march-april },
 issn = {0098-5589},
 publisher = {IEEE Computer Society},
 address = {Los Alamitos, CA, USA},
 keywords={artificial defects;automated test case generation;mutation driven generation;mutation operators;object-oriented classes;open source libraries;optimization;oracle;test suites quality;unit test;automatic test pattern generation;object-oriented programming;optimisation;program testing;},
 doi={10.1109/TSE.2011.93},
 url = {http://www.evosuite.org/wp-content/papercite-data/pdf/tse12_mutation.pdf},
}
